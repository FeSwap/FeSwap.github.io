(self.webpackChunkfeswap_docs=self.webpackChunkfeswap_docs||[]).push([[5691],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return p}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=l(n),p=r,k=u["".concat(c,".").concat(p)]||u[p]||m[p]||i;return n?a.createElement(k,s(s({ref:t},d),{},{components:n})):a.createElement(k,s({ref:t},d))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var l=2;l<i;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6573:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return o},metadata:function(){return c},toc:function(){return l},default:function(){return m}});var a=n(2122),r=n(9756),i=(n(7294),n(3905)),s={id:"Timelock",title:"FeSwap TimeLock Contract",hide_title:!0,sidebar_label:"TimeLock",hide_table_of_contents:!0},o=void 0,c={unversionedId:"Contracts/Timelock",id:"Contracts/Timelock",isDocsHomePage:!1,title:"FeSwap TimeLock Contract",description:"FeSwap TimeLock Contract",source:"@site/docs/Contracts/Timelock.md",sourceDirName:"Contracts",slug:"/Contracts/Timelock",permalink:"/docs/Contracts/Timelock",version:"current",frontMatter:{id:"Timelock",title:"FeSwap TimeLock Contract",hide_title:!0,sidebar_label:"TimeLock",hide_table_of_contents:!0},sidebar:"FeSwapSidebar",previous:{title:"Staking Reward",permalink:"/docs/Contracts/StakingTwinRewards"},next:{title:"FeSwap Governor",permalink:"/docs/Contracts/FeswGovernor"}},l=[{value:'<span className="title"> Timelock Address </span>',id:"timelock-address",children:[]},{value:'<span className="title"> Timelock Deployments Parameters </span>',id:"timelock-deployments-parameters",children:[]},{value:'<span className="title"> Timelock Contract Code </span>',id:"timelock-contract-code",children:[]}],d={toc:l};function m(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("div",{className:"title"},(0,i.kt)("h1",null," FeSwap TimeLock Contract ")),(0,i.kt)("hr",null),(0,i.kt)("p",null,"FeSwap ",(0,i.kt)("inlineCode",{parentName:"p"},"TimeLock")," contract is the contract used to finally execute the proposals that win the voting successfully. Only the ",(0,i.kt)("a",{parentName:"p",href:"/docs/Contracts/FeswGovernor"},(0,i.kt)("inlineCode",{parentName:"a"},"FeswGovernor"))," contract can call ",(0,i.kt)("inlineCode",{parentName:"p"},"TimeLock")," to queue/excute the proposal. "),(0,i.kt)("h3",{id:"timelock-address"},(0,i.kt)("span",{className:"title"}," Timelock Address ")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"ETH NetWork"),(0,i.kt)("th",{parentName:"tr",align:"center"},"FESW Token Address"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"ETH Mainnet"),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("a",{parentName:"td",href:"https://etherscan.io/address/0xd24347c40f4ed36f326f82e3befffaf3b8d436a1"},"0xd24347C40f4ed36f326f82E3bEFFfaf3B8D436a1"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"ETH Testnet Ropsten"),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("a",{parentName:"td",href:"https://ropsten.etherscan.io/address/0xFA2Dbaa137b3Bd13d8f1758311Ae909397EC18AB"},"0xFA2Dbaa137b3Bd13d8f1758311Ae909397EC18AB"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"ETH Testnet Rinkeby"),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("a",{parentName:"td",href:"https://rinkeby.etherscan.io/address/0xFA2Dbaa137b3Bd13d8f1758311Ae909397EC18AB"},"0xFA2Dbaa137b3Bd13d8f1758311Ae909397EC18AB"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"ETH Testnet Goerli"),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("a",{parentName:"td",href:"https://goerli.etherscan.io/address/0xFA2Dbaa137b3Bd13d8f1758311Ae909397EC18AB"},"0xFA2Dbaa137b3Bd13d8f1758311Ae909397EC18AB"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"ETH Testnet Kovan"),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("a",{parentName:"td",href:"https://kovan.etherscan.io/address/0xFA2Dbaa137b3Bd13d8f1758311Ae909397EC18AB"},"0xFA2Dbaa137b3Bd13d8f1758311Ae909397EC18AB"))))),(0,i.kt)("h3",{id:"timelock-deployments-parameters"},(0,i.kt)("span",{className:"title"}," Timelock Deployments Parameters ")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"}," constructor(address admin","_",", uint delay","_",") "))),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Parameters"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Value"),(0,i.kt)("th",{parentName:"tr",align:"left"},"information"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"admin","_"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"https://etherscan.io/address/0x77F98c147a37564c32E48054Bff7692A1F97f343"},"0x77F98c147a37564c32E48054Bff7692A1F97f343")),(0,i.kt)("td",{parentName:"tr",align:"left"},"This is the address of ",(0,i.kt)("a",{parentName:"td",href:"../Contracts/FeswGovernor"},"FeSwap Governance")," contract, which is the only entity that can operate Timelock contract.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"delay","_"),(0,i.kt)("td",{parentName:"tr",align:"left"},"0x2a300"),(0,i.kt)("td",{parentName:"tr",align:"left"},"This is the minimum duration the proposal must wait after it has been queued to be executed. This measure is for security considerraions. ",(0,i.kt)("br",null)," 0x2a300 means 172800 seconds, ie. 2 days")))),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"** Parameters on ETH Chain ")),(0,i.kt)("h3",{id:"timelock-contract-code"},(0,i.kt)("span",{className:"title"}," Timelock Contract Code ")),(0,i.kt)("p",null,"FeSwap ",(0,i.kt)("inlineCode",{parentName:"p"},"Timelock")," code is open-sourced at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/FeSwap/Governance/blob/main/contracts/Timelock.sol"},"Github FeSwapCore Project")," "),(0,i.kt)("p",null,"Following is the code deployed:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sol",metastring:'title="Timelock.sol"',title:'"Timelock.sol"'},'// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.7.0;\n\nimport "./utils/SafeMath.sol";\n\ncontract Timelock {\n    using SafeMath for uint;\n\n    event NewAdmin(address indexed newAdmin);\n    event NewPendingAdmin(address indexed newPendingAdmin);\n    event NewDelay(uint indexed newDelay);\n    event CancelTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature,  bytes data, uint eta);\n    event ExecuteTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature,  bytes data, uint eta);\n    event QueueTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature, bytes data, uint eta);\n\n    uint public constant GRACE_PERIOD = 14 days;\n    uint public constant MINIMUM_DELAY = 2 days;\n//  uint public constant MINIMUM_DELAY = 10 minutes;        // for on-chain test\n    uint public constant MAXIMUM_DELAY = 30 days;\n\n    address public admin;\n    address public pendingAdmin;\n    uint public delay;\n\n    mapping (bytes32 => bool) public queuedTransactions;\n\n    constructor(address admin_, uint delay_) {\n        require(delay_ >= MINIMUM_DELAY, "Timelock::constructor: Delay must exceed minimum delay.");\n        require(delay_ <= MAXIMUM_DELAY, "Timelock::setDelay: Delay must not exceed maximum delay.");\n\n        admin = admin_;\n        delay = delay_;\n    }\n\n    receive() external payable { }  \n\n    function setDelay(uint delay_) public {\n        require(msg.sender == address(this), "Timelock::setDelay: Call must come from Timelock.");\n        require(delay_ >= MINIMUM_DELAY, "Timelock::setDelay: Delay must exceed minimum delay.");\n        require(delay_ <= MAXIMUM_DELAY, "Timelock::setDelay: Delay must not exceed maximum delay.");\n        delay = delay_;\n\n        emit NewDelay(delay);\n    }\n\n    function acceptAdmin() public {\n        require(msg.sender == pendingAdmin, "Timelock::acceptAdmin: Call must come from pendingAdmin.");\n        admin = msg.sender;\n        pendingAdmin = address(0);\n\n        emit NewAdmin(admin);\n    }\n\n    function setPendingAdmin(address pendingAdmin_) public {\n        require(msg.sender == address(this), "Timelock::setPendingAdmin: Call must come from Timelock.");\n        pendingAdmin = pendingAdmin_;\n\n        emit NewPendingAdmin(pendingAdmin);\n    }\n\n    function queueTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public returns (bytes32) {\n        require(msg.sender == admin, "Timelock::queueTransaction: Call must come from admin.");\n       \n        require(eta >= getBlockTimestamp().add(delay), "Timelock::queueTransaction: Estimated execution block must satisfy delay.");\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n        queuedTransactions[txHash] = true;\n\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\n        return txHash;\n    }\n\n    function cancelTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public {\n        require(msg.sender == admin, "Timelock::cancelTransaction: Call must come from admin.");\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n        queuedTransactions[txHash] = false;\n\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\n    }\n\n    function executeTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public payable returns (bytes memory) {\n        require(msg.sender == admin, "Timelock::executeTransaction: Call must come from admin.");\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n        require(queuedTransactions[txHash], "Timelock::executeTransaction: Transaction hasn\'t been queued.");\n        require(getBlockTimestamp() >= eta, "Timelock::executeTransaction: Transaction hasn\'t surpassed time lock.");\n        require(getBlockTimestamp() <= eta.add(GRACE_PERIOD), "Timelock::executeTransaction: Transaction is stale.");\n\n        queuedTransactions[txHash] = false;\n\n        bytes memory callData;\n\n        if (bytes(signature).length == 0) {\n            callData = data;\n        } else {\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\n        }\n\n        // solium-disable-next-line security/no-call-value\n        (bool success, bytes memory returnData) = target.call{value:value}(callData);\n        require(success, "Timelock::executeTransaction: Transaction execution reverted.");\n\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\n\n        return returnData;\n    }\n\n    function getBlockTimestamp() internal view returns (uint) {\n        // solium-disable-next-line security/no-block-members\n        return block.timestamp;\n    }\n}\n')))}m.isMDXComponent=!0}}]);